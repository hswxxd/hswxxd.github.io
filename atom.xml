<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>笔记本</title>
  
  <subtitle>落后就要挨打!!!</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://hswxxd.github.io/"/>
  <updated>2020-05-19T13:10:15.099Z</updated>
  <id>http://hswxxd.github.io/</id>
  
  <author>
    <name>hsw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis基础数据类型使用</title>
    <link href="http://hswxxd.github.io/2020/05/19/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8/"/>
    <id>http://hswxxd.github.io/2020/05/19/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8/</id>
    <published>2020-05-19T07:20:01.000Z</published>
    <updated>2020-05-19T13:10:15.099Z</updated>
    
    <content type="html"><![CDATA[<p>redis是单线程、纯内存、高性能的<strong>key-value</strong>数据库。</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="1-set-get-del"><a href="#1-set-get-del" class="headerlink" title="1.set, get, del"></a>1.set, get, del</h3><ul><li><p>set: set key value    示例： set hello world        </p></li><li><p>get： get key             示例： get hello</p></li><li><p>del： del key             示例： del hello</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set hello world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get hello</span><br><span class="line">&quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt; del hello</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get hello</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h3 id="2-incr-decr-incrby-decrby"><a href="#2-incr-decr-incrby-decrby" class="headerlink" title="2.incr, decr, incrby, decrby"></a>2.incr, decr, incrby, decrby</h3></li><li><p>incr： incr key                示例： incr num</p></li><li><p>decr： decr key         示例： decy num</p></li><li><p>incrby： incrby key ${Integer}            示例： incrby num 100</p></li><li><p>decrby： decrby key ${Integer}            示例： incrby num 20</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set num 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(integer) 11</span><br><span class="line">127.0.0.1:6379&gt; decr num</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; incrby num 100</span><br><span class="line">(integer) 110</span><br><span class="line">127.0.0.1:6379&gt; decrby num 20</span><br><span class="line">(integer) 90</span><br></pre></td></tr></table></figure><h3 id="3-setnx-set-xx"><a href="#3-setnx-set-xx" class="headerlink" title="3.setnx, set xx"></a>3.setnx, set xx</h3></li><li><p>setnx： setnx key value        示例：setnx java best<br>###key不存在才设置</p></li><li><p>set xx： set key value xx             示例： set java bese xx<br>###key存在才设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exists java</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; set java good</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; setnx java best</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get java</span><br><span class="line">&quot;good&quot;</span><br><span class="line">127.0.0.1:6379&gt; set java best xx</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get java</span><br><span class="line">&quot;best&quot;</span><br></pre></td></tr></table></figure><h3 id="4-mget-mset（批量操作）"><a href="#4-mget-mset（批量操作）" class="headerlink" title="4.mget, mset（批量操作）"></a>4.mget, mset（批量操作）</h3><p>设置3个key-value，使用set操作需要发送3次set key value命令，需要3次网络事件+3次命令时间。<br>用mset只需要发送一次命令,mset key1 value1 key2 value2 … ，需要1次网络时间+3次命令时间。<br>mget同理。</p><img src="https://raw.githubusercontent.com/hswxxd/picRepo/master/img/20200519155724.png" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/hswxxd/picRepo/master/img/20200519155810.png" style="zoom:50%;" /></li><li><p>mset： mset key1 value1 key2 value2        示例：mset java good python goodtoo<br>###批量设置key-value</p></li><li><p>mget： mget key1 key2                     示例： mget java python<br>###批量获取key，原子操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mset java good python goodtoo</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget java python</span><br><span class="line">1) &quot;good&quot;</span><br><span class="line">2) &quot;goodtoo&quot;</span><br></pre></td></tr></table></figure><h3 id="5-getset-append-strlen"><a href="#5-getset-append-strlen" class="headerlink" title="5.getset, append, strlen"></a>5.getset, append, strlen</h3></li><li><p>getset: getset key newValue<br>###set key newValue并返回旧的value</p></li><li><p>append: append key value<br>###将value追加到旧的value</p></li><li><p>strlen: strlen key<br>###返回字符串长度（注意中文）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set hello world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; getset hello hi</span><br><span class="line">&quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt; get hello</span><br><span class="line">&quot;hi&quot;</span><br><span class="line">127.0.0.1:6379&gt; append hello hello</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; get hello</span><br><span class="line">&quot;hihello&quot;</span><br><span class="line">127.0.0.1:6379&gt; str hello</span><br><span class="line">(integer) 7</span><br></pre></td></tr></table></figure><h3 id="6-incrbyfloat-getrange-setrange"><a href="#6-incrbyfloat-getrange-setrange" class="headerlink" title="6.incrbyfloat, getrange, setrange"></a>6.incrbyfloat, getrange, setrange</h3></li><li><p>incrbyfloat: incrbyfloat key 1.1        ###为value增加浮点数值</p></li><li><p>getrange: getrange key start end        ###获得指定下标范围内的值</p></li><li><p>setrange: setrange key index value        ###将指定下标的值替换为value</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set num 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incrbyfloat num 1.1</span><br><span class="line">&quot;11.1&quot;</span><br><span class="line">127.0.0.1:6379&gt; set hello world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; getrange hello 1 3</span><br><span class="line">&quot;orl&quot;</span><br><span class="line">127.0.0.1:6379&gt; setrange hello 1 i</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; get hello</span><br><span class="line">&quot;wirld&quot;</span><br></pre></td></tr></table></figure></li></ul><img src="https://raw.githubusercontent.com/hswxxd/picRepo/master/img/20200519161408.png" style="zoom:50%;" /><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><h3 id="1-hset-hget-hdel"><a href="#1-hset-hget-hdel" class="headerlink" title="1.hset, hget, hdel"></a>1.hset, hget, hdel</h3><ul><li>hset: hset key field value</li><li>hget: hget key field</li><li>hdel: hdel key field<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset user age 20</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset user name xiaoming</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hget user age</span><br><span class="line">&quot;20&quot;</span><br><span class="line">127.0.0.1:6379&gt; hgetall user</span><br><span class="line">1) &quot;age&quot;</span><br><span class="line">2) &quot;20&quot;</span><br><span class="line">3) &quot;name&quot;</span><br><span class="line">4) &quot;xiaoming&quot;</span><br><span class="line">127.0.0.1:6379&gt; hdel user age</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall user</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;xiaoming&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h3 id="2-hexists-hlen"><a href="#2-hexists-hlen" class="headerlink" title="2.hexists, hlen"></a>2.hexists, hlen</h3></li><li>hexists: hexists key field<br>###判断hash中是否存在field</li><li>hlen: hlen key<br>获取哈希的field数量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hexists user name</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hexists user age</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; hlen user</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset user age 21</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hlen user</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><h3 id="3-hmset-hmget-hincrby"><a href="#3-hmset-hmget-hincrby" class="headerlink" title="3.hmset, hmget, hincrby"></a>3.hmset, hmget, hincrby</h3></li><li>hmset: hmset key field1 value 1 field2 value2 …</li><li>hmget: hmget key field1 field2 …</li><li>hincrby: hincrby key field ${integer}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset code_language java good python good1 php good2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget code_language java python</span><br><span class="line">1) &quot;good&quot;</span><br><span class="line">2) &quot;good1&quot;</span><br><span class="line">3) 127.0.0.1:6379&gt; hset code_language golang 123</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hincrby code_language golang 12</span><br><span class="line">(integer) 135</span><br></pre></td></tr></table></figure><h3 id="4-hgetall-hvals-hkeys"><a href="#4-hgetall-hvals-hkeys" class="headerlink" title="4.hgetall, hvals, hkeys"></a>4.hgetall, hvals, hkeys</h3></li><li>hgetall 获取hash key所有field和value</li><li>hvals 获取hash key中所有的value</li><li>hkeys 获取hash key中所有的key<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hgetall code_language</span><br><span class="line">1) &quot;java&quot;</span><br><span class="line">2) &quot;good&quot;</span><br><span class="line">3) &quot;python&quot;</span><br><span class="line">4) &quot;good1&quot;</span><br><span class="line">5) &quot;php&quot;</span><br><span class="line">6) &quot;good2&quot;</span><br><span class="line">7) &quot;golang&quot;</span><br><span class="line">8) &quot;135&quot;</span><br><span class="line">127.0.0.1:6379&gt; hvals code_language</span><br><span class="line">1) &quot;good&quot;</span><br><span class="line">2) &quot;good1&quot;</span><br><span class="line">3) &quot;good2&quot;</span><br><span class="line">4) &quot;135&quot;</span><br><span class="line">127.0.0.1:6379&gt; hkeys code_language</span><br><span class="line">1) &quot;java&quot;</span><br><span class="line">2) &quot;python&quot;</span><br><span class="line">3) &quot;php&quot;</span><br><span class="line">4) &quot;golang&quot;</span><br></pre></td></tr></table></figure><h3 id="5-hsetnx-hincrbyfloat"><a href="#5-hsetnx-hincrbyfloat" class="headerlink" title="5. hsetnx, hincrbyfloat"></a>5. hsetnx, hincrbyfloat</h3></li><li>hsetnx: hsetnx key field value<br>###类似setnx</li><li>hincrbyfloat: hincrbyfloat key field #{integer}<br>###类似incrbyfloat</li></ul><img src="https://raw.githubusercontent.com/hswxxd/picRepo/master/img/20200519175036.png" style="zoom:50%;" /><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><h3 id="1-lpush-rpush-linsert"><a href="#1-lpush-rpush-linsert" class="headerlink" title="1.lpush, rpush, linsert"></a>1.lpush, rpush, linsert</h3><ul><li>lpush: lpush key value1 value2 value3…<br>###从list左侧添加</li><li>rpush: rpush key value1 value2 value3…<br>###从list右侧添加</li><li>linsert: linsert key before|after value newValue<br>###在key中的value 前|后 插入newValue<h3 id="2-lpop-rpop"><a href="#2-lpop-rpop" class="headerlink" title="2.lpop, rpop"></a>2.lpop, rpop</h3></li><li>lpop: lpop key        ###左侧删除</li><li>rpop: rpop key            ###右侧删除<h3 id="3-lrem-ltrim"><a href="#3-lrem-ltrim" class="headerlink" title="3.lrem, ltrim"></a>3.lrem, ltrim</h3></li><li>lrem: lrem key count value        ###从list中删除count个与value相等的元素。<br>（1）count&gt;0，从左到右count个<br>（2）count&lt;0，从左到右|count|个<br>（3）count=0，所有匹配的值</li><li>ltrim: ltrim key start end        ###按照索引范围修剪，保留start-end之间的元素，其余删掉。<h3 id="4-lrange-lindex-llen"><a href="#4-lrange-lindex-llen" class="headerlink" title="4.lrange,lindex,llen"></a>4.lrange,lindex,llen</h3></li><li>lrange: lrange key start end        ###获取list中start—end范围的值，-1代表从右侧开始第一位</li><li>lindex: lindex key index               ###获取list中指定索引的value</li><li>llen: llen key                  ###获取list长度<h3 id="5-lset-blpop-brpop"><a href="#5-lset-blpop-brpop" class="headerlink" title="5.lset, blpop, brpop"></a>5.lset, blpop, brpop</h3></li><li>lset: lset key index newValue        ###将list中指定索引的值设位newValue</li><li>blpop: blpop key timeout               ###阻塞版本，timeout为阻塞超时时间</li><li>brpop: brpop key timeout            ###同blpop</li></ul><h3 id="使用list实现其他数据结构"><a href="#使用list实现其他数据结构" class="headerlink" title="使用list实现其他数据结构"></a>使用list实现其他数据结构</h3>  <img src="https://raw.githubusercontent.com/hswxxd/picRepo/master/img/20200519183206.png" style="zoom:50%;" /><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><h3 id="1-sadd-srem"><a href="#1-sadd-srem" class="headerlink" title="1.sadd srem"></a>1.sadd srem</h3><ul><li>sadd key element                ##添加</li><li>srem key element                ##移除<h3 id="2-scard-sismember-srandmember-smembers-spop"><a href="#2-scard-sismember-srandmember-smembers-spop" class="headerlink" title="2.scard, sismember, srandmember, smembers, spop"></a>2.scard, sismember, srandmember, smembers, spop</h3></li><li>scard key                        ##获取集合的元素个数</li><li>sismember key element                    ##判断element是否在集合在</li><li>srandmember key                    ##从集合中随机显示一个元素</li><li>smembers key                ##显示集合所有元素</li><li>spop key                ##从集合内随机弹出一个元素</li></ul><p><strong>注意srandmember显示和spop弹出的区别</strong></p><h3 id="3-sdiff-sinter-sunion（集合间的api）"><a href="#3-sdiff-sinter-sunion（集合间的api）" class="headerlink" title="3.sdiff, sinter, sunion（集合间的api）"></a>3.sdiff, sinter, sunion（集合间的api）</h3><ul><li>sdiff key1 key2                ###取差集</li><li>sinter key1 key2                ###取交集</li><li>sunion key1 key2                ###取并集</li><li>sdiff|sinter|sunion+store destkey key key1<br>###取key1和key2的差|交|并|集保存在destkey中</li></ul><img src="https://raw.githubusercontent.com/hswxxd/picRepo/master/img/20200519205707.png" style="zoom:50%;" /><h2 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h2><ul><li>zadd key score element                ##添加</li><li>zrem key element                    ##移除</li><li>zscore key element                #返回元素的score</li><li>zincrby key ${integer} element                ##增加或减少score</li><li>zcard key                        ##返回集合的元素个数</li><li>zrange key start end                ##返回范围内的元素</li><li>zrangebyscore key minScore maxScore                ##显示score范围内的元素（升序）</li><li>zcount key minScore maxScore                ##返回zset指定范围内的元素个数</li><li>zremrangebyrank                ##删除指定排名内的元素（升序）</li><li>zremrangebyscore                ##删除指定score内的元素（升序）<img src="https://raw.githubusercontent.com/hswxxd/picRepo/master/img/20200519210932.png" style="zoom:50%;" /></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;redis是单线程、纯内存、高性能的&lt;strong&gt;key-value&lt;/strong&gt;数据库。&lt;/p&gt;
&lt;h2 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>布隆过滤器</title>
    <link href="http://hswxxd.github.io/2020/05/19/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://hswxxd.github.io/2020/05/19/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2020-05-18T16:47:13.000Z</published>
    <updated>2020-05-19T02:55:54.208Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需要解决的问题"><a href="#需要解决的问题" class="headerlink" title="需要解决的问题"></a>需要解决的问题</h3><p>在大数据量的情况下，判断某个元素是否在集合内，</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>可用于如网页 URL 去重、垃圾邮件识别、大集合中重复元素的判断和缓存穿透等问题。</p><h3 id="布隆过滤器（Bloom-Filter）的实现原理"><a href="#布隆过滤器（Bloom-Filter）的实现原理" class="headerlink" title="布隆过滤器（Bloom Filter）的实现原理"></a>布隆过滤器（Bloom Filter）的实现原理</h3><p>布隆过滤器由一个超大的位图和多个哈希函数实现。<br><img src="https://raw.githubusercontent.com/hswxxd/picRepo/master/img/20200519004904.png" alt=""><br>以上图为例，具体的操作流程：假设集合里面有3个元素{x, y, z}，哈希函数的个数为3。首先将位数组进行初始化，将里面每个位都设置位0。</p><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p>对于集合里面的每一个元素，将元素依次通过3个哈希函数进行映射，每次映射都会产生一个哈希值，这个值对应位数组上面的一个点，然后将位数组对应的位置标记为1。</p><h3 id="查询元素"><a href="#查询元素" class="headerlink" title="查询元素"></a>查询元素</h3><p>查询W元素是否存在集合中的时候，同样的方法将W通过哈希映射到位数组上的3个点。如果3个点的其中有一个点不为1，则可以判断该元素一定不存在集合中。反之，如果3个点都为1，则该元素<strong>可能</strong>存在集合中。注意：此处不能判断该元素是否一定存在集合中，可能存在一定的误判率。可以从图中可以看到：假设某个元素通过映射对应下标为4，5，6这3个点。虽然这3个点都为1，但是很明显这3个点是不同元素经过哈希得到的位置，因此这种情况说明元素虽然不在集合中，也可能对应的都是1，这是误判存在的原因。<br>由此可以判断：当布隆过滤器判断某个元素在集合内存在时，其可能存在。<br>但是当布隆过滤器判断某个元素在集合内不存在时，其一定不存在。</p><h3 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h3><p>移除元素在布隆过滤器中是不被允许的，因为多个元素都进行多次哈希，所以很有可能出现位数组标记重合的情况，若可以删除元素（将元素经过哈希对应的位置标记为0），必然会对其他元素造成影响。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点：可以使用极少的内存来实现对元素是否存在于某个集合内的判断。</li><li>缺点：不能从集合中删除元素。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;需要解决的问题&quot;&gt;&lt;a href=&quot;#需要解决的问题&quot; class=&quot;headerlink&quot; title=&quot;需要解决的问题&quot;&gt;&lt;/a&gt;需要解决的问题&lt;/h3&gt;&lt;p&gt;在大数据量的情况下，判断某个元素是否在集合内，&lt;/p&gt;
&lt;h3 id=&quot;使用场景&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>原码, 反码, 补码 详解(转载)</title>
    <link href="http://hswxxd.github.io/2020/05/12/%E5%8E%9F%E7%A0%81-%E5%8F%8D%E7%A0%81-%E8%A1%A5%E7%A0%81-%E8%AF%A6%E8%A7%A3/"/>
    <id>http://hswxxd.github.io/2020/05/12/%E5%8E%9F%E7%A0%81-%E5%8F%8D%E7%A0%81-%E8%A1%A5%E7%A0%81-%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-05-12T08:29:12.000Z</published>
    <updated>2020-05-18T16:25:22.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-机器数和真值"><a href="#一-机器数和真值" class="headerlink" title="一. 机器数和真值"></a>一. 机器数和真值</h2><p>在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念.</p><h3 id="1、机器数"><a href="#1、机器数" class="headerlink" title="1、机器数"></a>1、机器数</h3><p>一个数在计算机中的二进制表示形式, 叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1.</p><p>比如，十进制中的数 +3 ，计算机字长为8位，转换成二进制就是00000011。如果是 -3 ，就是 10000011 。</p><p>那么，这里的 00000011 和 10000011 就是机器数。</p><h3 id="2、真值"><a href="#2、真值" class="headerlink" title="2、真值"></a>2、真值</h3><blockquote><p>因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 10000011，其最高位1代表负，其真正数值是 -3 而不是形式值131（10000011转换成十进制等于131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。</p></blockquote><p>例：0000 0001的真值 = +000 0001 = +1，1000 0001的真值 = –000 0001 = –1</p><h2 id="二-原码-反码-补码的基础概念和计算方法"><a href="#二-原码-反码-补码的基础概念和计算方法" class="headerlink" title="二. 原码, 反码, 补码的基础概念和计算方法."></a>二. 原码, 反码, 补码的基础概念和计算方法.</h2><p>在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念.对于一个数, 计算机要使用一定的编码方式进行存储. 原码, 反码, 补码是机器存储一个具体数字的编码方式.</p><h3 id="1-原码"><a href="#1-原码" class="headerlink" title="1. 原码"></a>1. 原码</h3><p>原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是8位二进制:</p><blockquote><p>[+1]原 = 0000 0001</p><p>[-1]原 = 1000 0001</p></blockquote><p>第一位是符号位. 因为第一位是符号位, 所以8位二进制数的取值范围就是:</p><blockquote><p>[1111 1111 , 0111 1111]</p></blockquote><p>即</p><blockquote><p>[-127 , 127]</p></blockquote><p>原码是人脑最容易理解和计算的表示方式.</p><h3 id="2-反码"><a href="#2-反码" class="headerlink" title="2. 反码"></a>2. 反码</h3><p>反码的表示方法是:</p><p>正数的反码是其本身</p><p>负数的反码是在其原码的基础上, 符号位不变，其余各个位取反.</p><blockquote><p>[+1] = [00000001]原 = [00000001]反</p><p>[-1] = [10000001]原 = [11111110]反</p></blockquote><p>可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算.</p><h3 id="3-补码"><a href="#3-补码" class="headerlink" title="3. 补码"></a>3. 补码</h3><p>补码的表示方法是:</p><p>正数的补码就是其本身</p><p>负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)</p><blockquote><p>[+1] = [00000001]原 = [00000001]反 = [00000001]补</p><p>[-1] = [10000001]原 = [11111110]反 = [11111111]补</p></blockquote><p>对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值.</p><h2 id="三-为何要使用原码-反码和补码"><a href="#三-为何要使用原码-反码和补码" class="headerlink" title="三. 为何要使用原码, 反码和补码"></a>三. 为何要使用原码, 反码和补码</h2><p>在开始深入学习前, 我的学习建议是先”死记硬背”上面的原码, 反码和补码的表示方式以及计算方法.</p><p>现在我们知道了计算机可以有三种编码方式表示一个数. 对于正数因为三种编码方式的结果都相同:</p><blockquote><p>[+1] = [00000001]原 = [00000001]反 = [00000001]补</p></blockquote><p>所以不需要过多解释. 但是对于负数:</p><blockquote><p>[-1] = [10000001]原 = [11111110]反 = [11111111]补</p></blockquote><p>可见原码, 反码和补码是完全不同的. 既然原码才是被人脑直接识别并用于计算表示方式, 为何还会有反码和补码呢?</p><p>首先, 因为人脑可以知道第一位是符号位, 在计算的时候我们会根据符号位, 选择对真值区域的加减. (真值的概念在本文最开头). 但是对于计算机, 加减乘数已经是最基础的运算, 要设计的尽量简单. 计算机辨别”符号位”显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了.</p><p>于是人们开始探索 将符号位参与运算, 并且只保留加法的方法. 首先来看原码:</p><p>计算十进制的表达式: 1-1=0</p><blockquote><p>1 - 1 = 1 + (-1) = [00000001]原 + [10000001]原 = [10000010]原 = -2</p></blockquote><p>如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.这也就是为何计算机内部不使用原码表示一个数.</p><p>为了解决原码做减法的问题, 出现了反码:</p><p>计算十进制的表达式: 1-1=0</p><blockquote><p>1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原= [0000 0001]反 + [1111 1110]反 = [1111 1111]反 = [1000 0000]原 = -0</p></blockquote><p>发现用反码计算减法, 结果的真值部分是正确的. 而唯一的问题其实就出现在”0”这个特殊的数值上. 虽然人们理解上+0和-0是一样的, 但是0带符号是没有任何意义的. 而且会有[0000 0000]原和[1000 0000]原两个编码表示0.</p><p>于是补码的出现, 解决了0的符号以及两个编码的问题:</p><blockquote><p>1-1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原</p></blockquote><p>这样0用[0000 0000]表示, 而以前出现问题的-0则不存在了.而且可以用[1000 0000]表示-128:</p><blockquote><p>(-1) + (-127) = [1000 0001]原 + [1111 1111]原 = [1111 1111]补 + [1000 0001]补 = [1000 0000]补</p></blockquote><p>-1-127的结果应该是-128, 在用补码运算的结果中, [1000 0000]补 就是-128. 但是注意因为实际上是使用以前的-0的补码来表示-128, 所以-128并没有原码和反码表示.(对-128的补码表示[1000 0000]补算出来的原码是[0000 0000]原, 这是不正确的)</p><p>使用补码, 不仅仅修复了0的符号以及存在两个编码的问题, 而且还能够多表示一个最低数. 这就是为什么8位二进制, 使用原码或反码表示的范围为[-127, +127], 而使用补码表示的范围为[-128, 127].</p><p>因为机器使用补码, 所以对于编程中常用到的32位int类型, 可以表示范围是: [-231, 231-1] 因为第一位表示的是符号位.而使用补码表示时又可以多保存一个最小值.</p><h2 id="四-原码-反码-补码-再深入"><a href="#四-原码-反码-补码-再深入" class="headerlink" title="四 原码, 反码, 补码 再深入"></a>四 原码, 反码, 补码 再深入</h2><p>计算机巧妙地把符号位参与运算, 并且将减法变成了加法, 背后蕴含了怎样的数学原理呢?</p><p>将钟表想象成是一个1位的12进制数. 如果当前时间是6点, 我希望将时间设置成4点, 需要怎么做呢?我们可以:</p><blockquote><p>\1. 往回拨2个小时: 6 - 2 = 4</p><p>\2. 往前拨10个小时: (6 + 10) mod 12 = 4</p><p>\3. 往前拨10+12=22个小时: (6+22) mod 12 =4</p></blockquote><p>2,3方法中的mod是指取模操作, 16 mod 12 =4 即用16除以12后的余数是4.</p><p>所以钟表往回拨(减法)的结果可以用往前拨(加法)替代!</p><p>现在的焦点就落在了如何用一个正数, 来替代一个负数. 上面的例子我们能感觉出来一些端倪, 发现一些规律. 但是数学是严谨的. 不能靠感觉.</p><p>首先介绍一个数学中相关的概念: 同余</p><h3 id="同余的概念"><a href="#同余的概念" class="headerlink" title="同余的概念"></a>同余的概念</h3><p>两个整数a，b，若它们除以整数m所得的余数相等，则称a，b对于模m同余</p><p>记作 a ≡ b (mod m)</p><p>读作 a 与 b 关于模 m 同余。</p><p>举例说明:</p><blockquote><p>4 mod 12 = 4</p><p>16 mod 12 = 4</p><p>28 mod 12 = 4</p></blockquote><p>所以4, 16, 28关于模 12 同余.</p><h3 id="负数取模"><a href="#负数取模" class="headerlink" title="负数取模"></a>负数取模</h3><p>正数进行mod运算是很简单的. 但是负数呢?</p><p>下面是关于mod运算的数学定义:</p><p><a href="http://images.cnblogs.com/cnblogs_com/zhangziqiu/201103/201103302155507894.jpg" target="_blank" rel="noopener"><img src="https://images.cnblogs.com/cnblogs_com/zhangziqiu/201103/201103302155504514.jpg" alt="clip_image001"></a></p><p>上面是截图, “取下界”符号找不到如何输入(word中粘贴过来后乱码). 下面是使用”L”和”J”替换上图的”取下界”符号:</p><blockquote><p>x mod y = x - y L x / y J</p></blockquote><p>上面公式的意思是:</p><p>x mod y等于 x 减去 y 乘上 x与y的商的下界.</p><p>以 -3 mod 2 举例:</p><blockquote><p>-3 mod 2</p><p>= -3 - 2xL -3/2 J</p><p>= -3 - 2xL-1.5J</p><p>= -3 - 2x(-2)</p><p>= -3 + 4 = 1</p></blockquote><p>所以:</p><blockquote><p>(-2) mod 12 = 12-2=10</p><p>(-4) mod 12 = 12-4 = 8</p><p>(-5) mod 12 = 12 - 5 = 7</p></blockquote><h3 id="开始证明"><a href="#开始证明" class="headerlink" title="开始证明"></a>开始证明</h3><p>再回到时钟的问题上:</p><blockquote><p>回拨2小时 = 前拨10小时</p><p>回拨4小时 = 前拨8小时</p><p>回拨5小时= 前拨7小时</p></blockquote><p>注意, 这里发现的规律!</p><p>结合上面学到的同余的概念.实际上:</p><blockquote><p>(-2) mod 12 = 10</p><p>10 mod 12 = 10</p></blockquote><p>-2与10是同余的.</p><blockquote><p>(-4) mod 12 = 8</p><p>8 mod 12 = 8</p></blockquote><p>-4与8是同余的.</p><p>距离成功越来越近了. 要实现用正数替代负数, 只需要运用同余数的两个定理:</p><p>反身性:</p><blockquote><p>a ≡ a (mod m)</p></blockquote><p>这个定理是很显而易见的.</p><p>线性运算定理:</p><blockquote><p>如果a ≡ b (mod m)，c ≡ d (mod m) 那么:</p><p>(1)a ± c ≡ b ± d (mod m)</p><p>(2)a * c ≡ b * d (mod m)</p></blockquote><p>如果想看这个定理的证明, 请看:<a href="http://baike.baidu.com/view/79282.htm" target="_blank" rel="noopener">http://baike.baidu.com/view/79282.htm</a></p><p>所以:</p><blockquote><p>7 ≡ 7 (mod 12)</p><p>(-2) ≡ 10 (mod 12)</p><p>7 -2 ≡ 7 + 10 (mod 12)</p></blockquote><p>现在我们为一个负数, 找到了它的正数同余数. 但是并不是7-2 = 7+10, 而是 7 -2 ≡ 7 + 10 (mod 12) , 即计算结果的余数相等.</p><p>接下来回到二进制的问题上, 看一下: 2-1=1的问题.</p><blockquote><p>2-1=2+(-1) = [0000 0010]原 + [1000 0001]原= [0000 0010]反 + [1111 1110]反</p></blockquote><p>先到这一步, -1的反码表示是1111 1110. 如果这里将[1111 1110]认为是原码, 则[1111 1110]原 = -126, 这里将符号位除去, 即认为是126.</p><p>发现有如下规律:</p><blockquote><p>(-1) mod 127 = 126</p><p>126 mod 127 = 126</p></blockquote><p>即:</p><blockquote><p>(-1) ≡ 126 (mod 127)</p><p>2-1 ≡ 2+126 (mod 127)</p></blockquote><p>2-1 与 2+126的余数结果是相同的! 而这个余数, 正式我们的期望的计算结果: 2-1=1</p><p>所以说一个数的反码, 实际上是这个数对于一个膜的同余数. 而这个膜并不是我们的二进制, 而是所能表示的最大值! 这就和钟表一样, 转了一圈后总能找到在可表示范围内的一个正确的数值!</p><p>而2+126很显然相当于钟表转过了一轮, 而因为符号位是参与计算的, 正好和溢出的最高位形成正确的运算结果.</p><p>既然反码可以将减法变成加法, 那么现在计算机使用的补码呢? 为什么在反码的基础上加1, 还能得到正确的结果?</p><blockquote><p>2-1=2+(-1) = [0000 0010]原 + [1000 0001]原 = [0000 0010]补 + [1111 1111]补</p></blockquote><p>如果把[1111 1111]当成原码, 去除符号位, 则:</p><blockquote><p>[0111 1111]原 = 127</p></blockquote><p>其实, 在反码的基础上+1, 只是相当于增加了膜的值:</p><blockquote><p>(-1) mod 128 = 127</p><p>127 mod 128 = 127</p><p>2-1 ≡ 2+127 (mod 128)</p></blockquote><p>此时, 表盘相当于每128个刻度转一轮. 所以用补码表示的运算结果最小值和最大值应该是[-128, 128].</p><p>但是由于0的特殊情况, 没有办法表示128, 所以补码的取值范围是[-128, 127]</p><p>本人一直不善于数学, 所以如果文中有不对的地方请大家多多包含, 多多指点!</p><p>作者：<a href="http://www.cnblogs.com/zhangziqiu/" target="_blank" rel="noopener">张子秋</a><br>出处：<a href="http://www.cnblogs.com/zhangziqiu/" target="_blank" rel="noopener">http://www.cnblogs.com/zhangziqiu/</a><br>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-机器数和真值&quot;&gt;&lt;a href=&quot;#一-机器数和真值&quot; class=&quot;headerlink&quot; title=&quot;一. 机器数和真值&quot;&gt;&lt;/a&gt;一. 机器数和真值&lt;/h2&gt;&lt;p&gt;在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念.&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
